#!/usr/bin/env python
# -*- coding: utf-8 -*-

# https://projecteuler.net/problem=2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import math

##########
# Solution with fibonacci sequence closed formula
##########
sq5 = math.sqrt(5)
def fibonacci(n):
    return int(1 / sq5 * ((0.5 + sq5 / 2) ** n - (0.5 - sq5 / 2) ** n))

def fibonacci_cf_generator(maxvalue):
    n, value  = 0, 0
    while value <= maxvalue:
        yield value
        n += 1
        value = fibonacci(n)

def euler_cf_generator(n=4000000):
    total = 0
    for i in fibonacci_cf_generator(n):
        if i % 2 != 0:
            total += i
    return total

def solve_cf_generator(n=4000000):
    return euler_cf_generator(n)

##########
# Naive solution with fibonacci sequence generator
##########

def fibonacci_generator(maxvalue):
    a, b = 0,1
    while a <= maxvalue:
        yield a
        a, b = b, a + b

def euler_naive_generator(n):
    total = 0
    for i in fibonacci_generator(n):
        #print(i)
        if i % 2 != 0:
            total += i
    return total

def solve_naive_generator(n=4000000):
    return euler_naive_generator(n)

##########
# Naive solution with recursive fibonacci sequence
##########

def fibonacci_recursive(n):
    if n == 0: return 0
    elif n == 1: return 1
    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)

def euler_naive_recursive(n):
    total = 0
    i = 1
    while True:
        fib = fibonacci_recursive(i)
        # print('{} {}'.format(i, fib))
        if fib > n:
            break
        if fib%2 != 0:
            total += fib
        i += 1
    return total

def solve_naive_recursive(n=4000000):
    return euler_naive_recursive(n)

# export to be measured
race = {
    'problemName': '2',
    'author': 'erik',
    'raceables': {
        'naive_recursive': solve_naive_recursive,
        'naive_generator': solve_naive_generator,
        'cf_generator': solve_cf_generator
    }
}

if __name__ == "__main__":
    print solve_cf_generator()


